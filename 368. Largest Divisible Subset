// 368. Largest Divisible Subset

class Solution 
{
public: 
    vector<int> largestDivisibleSubset(vector<int>& nums) 
    {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int>dp(n, 1); 
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                if(nums[i] % nums[j] == 0) dp[i] = max(dp[i], dp[j]+1); 
            }
        }

        int maxi = 1;
        int ind = 0;
        for(int i = 0; i < n; i++)
        {
            if(dp[i] > maxi)
            {
                maxi = dp[i];
                ind = i;
            }
        }

        vector<int>ans;
        ans.push_back(nums[ind]); 
        ind--;
        maxi--;
        for(int i = ind; i >= 0; i--)
        {
            if(dp[i] == maxi)
            {
                if(ans.back() % nums[i] == 0)
                {
                    ans.push_back(nums[i]);
                    maxi--;
                }
            }
        }

        return ans;
    }
};
