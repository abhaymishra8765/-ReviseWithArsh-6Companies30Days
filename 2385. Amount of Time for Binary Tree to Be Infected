// 2385. Amount of Time for Binary Tree to Be Infected

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution 
{
public:
    unordered_map<int, vector<int>>mp;
    void Graph(TreeNode* root)
    {
        if(root == nullptr) return;
        if(root -> left != nullptr)
         {
             mp[root->val].push_back(root->left->val);
             mp[root->left->val].push_back(root->val);
         }

         if(root -> right != nullptr)
         {
            mp[root->val].push_back(root->right->val);
            mp[root->right->val].push_back(root->val);
         }

         Graph(root->left);
         Graph(root->right);
    }

     

    int amountOfTime(TreeNode* root, int start) 
    {
          Graph(root);
          vector<int>vis(1e5+1, 0);
          vis[start] = 1;
          queue<pair<int, int>>q;
          q.push({0, start});
          int ans = 0;
          while(!q.empty())
          {
              auto it = q.front();
              q.pop();
              ans = it.first;
              int node = it.second;

              for(auto i : mp[node])
              {
                  if(!vis[i])
                  {
                      vis[i] = 1;
                      q.push({ans+1, i});
                  }
              }
          }

          return ans;
    }
};
