// 1425. Constrained Subsequence Sum

class Solution 
{
public:
    int constrainedSubsetSum(vector<int>& nums, int k) 
    {
        int n = nums.size();
        vector<int>dp(n); 
        priority_queue<pair<int,int>>pq;
        dp[0] = nums[0]; 
        pq.push({nums[0], 0});
        int ans = dp[0];

        for(int i = 1; i < n; i++)
        { 
            while(!pq.empty() && pq.top().second < i-k) pq.pop();
            dp[i] = nums[i] + max(0, pq.top().first); 
            pq.push({dp[i], i});
            ans = max(ans, dp[i]);
        } 
        return ans;
    }
};
