// 1373. Maximum Sum BST in Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode 
 * {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution 
{
public: 
    int ans = INT_MIN;
    vector<int>solve(TreeNode* root)
    {
        if(root == nullptr) return {INT_MAX, INT_MIN, 0};

        vector<int>left = solve(root->left);
        vector<int>right = solve(root->right);

        int val = root->val;
        if(!(val > left[1] && val < right[0])) return {INT_MIN, INT_MAX, 0};

        ans = max(ans, left[2]+right[2]+root->val);

        return {min(root->val, left[0]), max(root->val, right[1]), left[2]+right[2]+root->val};
    }


    int maxSumBST(TreeNode* root) 
    {
         solve(root);
         if(ans < 0) return 0;
         return ans;
    }
};
