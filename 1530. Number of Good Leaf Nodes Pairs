// 1530. Number of Good Leaf Nodes Pairs

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */ 

class Solution 
{
public:
    vector<TreeNode*>leaf;
    unordered_map<TreeNode*, vector<TreeNode*>>mp;
    unordered_map<TreeNode*, int>vis; 

    void solve(TreeNode* root)
    {
        if(root->left == nullptr && root -> right == nullptr)
        {
            leaf.push_back(root);
            return;
        }
        
        if(root -> left != nullptr)
        {
            mp[root->left].push_back(root);
            mp[root].push_back(root->left);
            solve(root->left);
        } 

        if(root -> right != nullptr)
        {
            mp[root->right].push_back(root);
            mp[root].push_back(root->right);
            solve(root->right);
        } 
    }

    int path = 0, ans = 0;
    void dfs(TreeNode* root, int distance)
    {
        vis[root] = 1;
        if(root -> left == NULL && root -> right == NULL && path != 0) ans++;
        for(auto i : mp[root])
        {
            if(!vis[i] && path < distance)
            {
                path++;
                dfs(i, distance);
                path--;
            }
        }

        vis[root] = 0;
    }

    int countPairs(TreeNode* root, int distance) 
    { 
        solve(root); 
        for(auto it : leaf) dfs(it, distance); 
        return ans/2;
    }
};
